const { pool, isConnected } = require('../db');
const socketService = require('../socket');
const messageController = require('./messageController');

// Mock data khi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c database
const mockAnnouncements = [
  {
    AnnouncementID: 1,
    AnnouncementContent: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi SnakeChat! H·ªá th·ªëng ƒëang trong qu√° tr√¨nh kh·ªüi ƒë·ªông.',
    AnnouncementType: 'Th√¥ng tin',
    CreatedAt: new Date().toISOString()
  },
  {
    AnnouncementID: 2,
    AnnouncementContent: 'H·ªá th·ªëng hi·ªán t·∫°i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi database. Vui l√≤ng th·ª≠ l·∫°i sau.',
    AnnouncementType: 'C·∫£nh b√°o', 
    CreatedAt: new Date(Date.now() - 3600000).toISOString()
  },
  {
    AnnouncementID: 3,
    AnnouncementContent: 'T√≠nh nƒÉng th√¥ng b√°o chung ƒëang ho·∫°t ƒë·ªông ·ªü ch·∫ø ƒë·ªô offline.',
    AnnouncementType: 'B·∫£o tr√¨',
    CreatedAt: new Date(Date.now() - 7200000).toISOString()
  }
];

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o chung
exports.getAllAnnouncements = async (req, res) => {
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    if (!isConnected()) {
      console.log('‚ö†Ô∏è Database kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, s·ª≠ d·ª•ng mock data');
      return res.json({ 
        success: true, 
        message: 'L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline)',
        items: mockAnnouncements 
      });
    }

    const [announcements] = await pool.query(`
      SELECT * FROM GeneralAnnouncement
      ORDER BY CreatedAt DESC
    `);
    
    res.json({ 
      success: true, 
      message: 'L·∫•y danh s√°ch th√¥ng b√°o chung th√†nh c√¥ng',
      items: announcements 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o chung:', error);
    
    // N·∫øu l·ªói database, tr·∫£ v·ªÅ mock data thay v√¨ l·ªói 500
    if (error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED' || error.errno === 'ETIMEDOUT') {
      console.log('‚ö†Ô∏è Timeout k·∫øt n·ªëi database, s·ª≠ d·ª•ng mock data');
      return res.json({ 
        success: true, 
        message: 'L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline - k·∫øt n·ªëi database b·ªã ch·∫∑n)',
        items: mockAnnouncements 
      });
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: ' + error.message 
    });
  }
};

// L·∫•y th√¥ng b√°o chung theo ID
exports.getAnnouncementById = async (req, res) => {
  const { id } = req.params;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    if (!isConnected()) {
      const mockItem = mockAnnouncements.find(item => item.AnnouncementID == id);
      if (mockItem) {
        return res.json({ 
          success: true, 
          message: 'L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline)',
          data: mockItem 
        });
      } else {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
        });
      }
    }
    
    const [announcements] = await pool.query(`
      SELECT * FROM GeneralAnnouncement
      WHERE AnnouncementID = ?
    `, [id]);
    
    if (announcements.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
      });
    }
    
    res.json({ 
      success: true, 
      message: 'L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng',
      data: announcements[0] 
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin th√¥ng b√°o:', error);
    
    // N·∫øu l·ªói database, tr·∫£ v·ªÅ mock data
    if (error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED' || error.errno === 'ETIMEDOUT') {
      const mockItem = mockAnnouncements.find(item => item.AnnouncementID == id);
      if (mockItem) {
        return res.json({ 
          success: true, 
          message: 'L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline)',
          data: mockItem 
        });
      }
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ server: ' + error.message 
    });
  }
};

// T·∫°o th√¥ng b√°o chung m·ªõi v√† g·ª≠i ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.createAnnouncement = async (req, res) => {
  const { content, announcementType } = req.body;
  
  if (!content || !announcementType) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu th√¥ng tin th√¥ng b√°o ho·∫∑c lo·∫°i th√¥ng b√°o' 
    });
  }

  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    if (!isConnected()) {
      console.log('‚ö†Ô∏è Database kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, ch·∫ø ƒë·ªô offline');
      // T·∫°o mock announcement
      const newMockItem = {
        AnnouncementID: mockAnnouncements.length + 1,
        AnnouncementContent: content,
        AnnouncementType: announcementType,
        CreatedAt: new Date().toISOString()
      };
      mockAnnouncements.unshift(newMockItem);
      
      return res.status(201).json({
        success: true,
        message: 'ƒê√£ t·∫°o th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline - s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô khi k·∫øt n·ªëi l·∫°i database)',
        data: {
          announcement_id: newMockItem.AnnouncementID,
          content,
          type: announcementType,
          users_notified: 0
        }
      });
    }
  
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();
      
      // Th√™m th√¥ng b√°o v√†o database
      const [result] = await connection.query(`
        INSERT INTO GeneralAnnouncement (AnnouncementContent, AnnouncementType, CreatedAt)
        VALUES (?, ?, NOW())
      `, [content, announcementType]);
      
      const announcementId = result.insertId;
      
      // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (tr·ª´ t√†i kho·∫£n h·ªá th·ªëng ID: 1)
      const [users] = await connection.query(`
        SELECT user_id FROM users
        WHERE user_id != 1 AND role_id = 2
      `);
      
      await connection.commit();
      
      // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng ng∆∞·ªùi d√πng qua h·ªá th·ªëng tin nh·∫Øn (ch·ªâ khi c√≥ k·∫øt n·ªëi)
      try {
        const messagePromises = users.map(user => {
          return messageController.sendSystemMessage({
            body: {
              user_id: user.user_id,
              content: `üì¢ TH√îNG B√ÅO H·ªÜ TH·ªêNG üì¢\n\n${content}`
            }
          }, {
            status: () => ({
              json: () => ({})
            })
          });
        });
        
        // ƒê·ª£i t·∫•t c·∫£ tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i xong
        await Promise.all(messagePromises);
        
        // G·ª≠i th√¥ng b√°o qua socket ƒë·ªÉ c·∫≠p nh·∫≠t UI cho t·ª´ng ng∆∞·ªùi d√πng
        const announcementData = {
          announcement_id: announcementId,
          content,
          type: announcementType,
          created_at: new Date()
        };
        
        // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng ng∆∞·ªùi d√πng ƒëang online
        users.forEach(user => {
          try {
            socketService.emitToUser(user.user_id, 'announcement_created', announcementData);
          } catch (socketError) {
            console.log('L·ªói socket:', socketError.message);
          }
        });
      } catch (notifyError) {
        console.log('L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn users:', notifyError.message);
      }
      
      res.status(201).json({
        success: true,
        message: 'ƒê√£ t·∫°o v√† g·ª≠i th√¥ng b√°o chung th√†nh c√¥ng',
        data: {
          announcement_id: announcementId,
          content,
          type: announcementType,
          users_notified: users.length
        }
      });
    } catch (dbError) {
      await connection.rollback();
      throw dbError;
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('L·ªói khi t·∫°o th√¥ng b√°o chung:', error);
    
    // N·∫øu l·ªói database, v·∫´n cho ph√©p t·∫°o ·ªü ch·∫ø ƒë·ªô offline
    if (error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED' || error.errno === 'ETIMEDOUT') {
      const newMockItem = {
        AnnouncementID: mockAnnouncements.length + 1,
        AnnouncementContent: content,
        AnnouncementType: announcementType,
        CreatedAt: new Date().toISOString()
      };
      mockAnnouncements.unshift(newMockItem);
      
      return res.status(201).json({
        success: true,
        message: 'ƒê√£ t·∫°o th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline - k·∫øt n·ªëi database b·ªã ch·∫∑n)',
        data: {
          announcement_id: newMockItem.AnnouncementID,
          content,
          type: announcementType,
          users_notified: 0
        }
      });
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi t·∫°o th√¥ng b√°o chung: ' + error.message 
    });
  }
};

// C·∫≠p nh·∫≠t th√¥ng b√°o chung
exports.updateAnnouncement = async (req, res) => {
  const { id } = req.params;
  const { content, announcementType } = req.body;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  if (!content && !announcementType) {
    return res.status(400).json({ 
      success: false, 
      message: 'Kh√¥ng c√≥ th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t' 
    });
  }
  
  try {
    let query = 'UPDATE GeneralAnnouncement SET ';
    const params = [];
    
    if (content) {
      query += 'AnnouncementContent = ?';
      params.push(content);
    }
    
    if (content && announcementType) {
      query += ', ';
    }
    
    if (announcementType) {
      query += 'AnnouncementType = ?';
      params.push(announcementType);
    }
    
    query += ' WHERE AnnouncementID = ?';
    params.push(id);
    
    const [result] = await pool.query(query, params);
    
    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi'
      });
    }
    
    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng',
      data: {
        announcement_id: parseInt(id),
        content,
        type: announcementType
      }
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o' 
    });
  }
};

// X√≥a th√¥ng b√°o chung
exports.deleteAnnouncement = async (req, res) => {
  const { id } = req.params;
  
  if (!id) {
    return res.status(400).json({ 
      success: false, 
      message: 'Thi·∫øu ID th√¥ng b√°o' 
    });
  }
  
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    if (!isConnected()) {
      const mockIndex = mockAnnouncements.findIndex(item => item.AnnouncementID == id);
      if (mockIndex !== -1) {
        mockAnnouncements.splice(mockIndex, 1);
        return res.json({
          success: true,
          message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline)'
        });
      } else {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
        });
      }
    }
    
    const [result] = await pool.query(`
      DELETE FROM GeneralAnnouncement
      WHERE AnnouncementID = ?
    `, [id]);
    
    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o'
      });
    }
    
    res.json({
      success: true,
      message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a th√¥ng b√°o:', error);
    
    // N·∫øu l·ªói database, th·ª≠ x√≥a t·ª´ mock data
    if (error.code === 'ETIMEDOUT' || error.code === 'ECONNREFUSED' || error.errno === 'ETIMEDOUT') {
      const mockIndex = mockAnnouncements.findIndex(item => item.AnnouncementID == id);
      if (mockIndex !== -1) {
        mockAnnouncements.splice(mockIndex, 1);
        return res.json({
          success: true,
          message: 'X√≥a th√¥ng b√°o th√†nh c√¥ng (ch·∫ø ƒë·ªô offline - k·∫øt n·ªëi database b·ªã ch·∫∑n)'
        });
      }
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi x√≥a th√¥ng b√°o: ' + error.message 
    });
  }
}; 