const mysql = require('mysql2/promise');

// C·∫•u h√¨nh k·∫øt n·ªëi t·ªõi MySQL
const pool = mysql.createPool({
  host: 'crossover.proxy.rlwy.net',
  user: 'root',
  password: 'UfLbHIusxLkfkhNjHLtMyVcngTWqhkhG',
  port: '24147',
  database: 'snakechat',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  enableKeepAlive: true,
  keepAliveInitialDelay: 0,
  timezone: '+07:00', // Thi·∫øt l·∫≠p m√∫i gi·ªù Vi·ªát Nam
  acquireTimeout: 60000, // 60 gi√¢y timeout ƒë·ªÉ l·∫•y connection
  timeout: 60000, // 60 gi√¢y timeout cho query
  reconnect: true, // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i
  idleTimeout: 300000, // 5 ph√∫t idle timeout
});

// Bi·∫øn theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
let connected = false;
let retryCount = 0;
const maxRetries = 5; // Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi

// Ki·ªÉm tra k·∫øt n·ªëi
const connectToDatabase = async () => {
  try {
    const connection = await pool.getConnection();
    console.log('‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng! ‚úÖ');
    
    // Thi·∫øt l·∫≠p m√∫i gi·ªù cho phi√™n l√†m vi·ªác
    await connection.query("SET time_zone = '+07:00'");
    console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p m√∫i gi·ªù cho MySQL: UTC+7 (Vi·ªát Nam) ‚úÖ');
    
    connection.release();
    connected = true; // C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi
    retryCount = 0; // Reset s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi
    return pool;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL: ', error.message, '‚ùå');
    connected = false; // C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi
    
    // TƒÉng s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi
    retryCount++;
    
    // N·∫øu v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa, kh√¥ng th·ª≠ l·∫°i n·ªØa
    if (retryCount >= maxRetries) {
      console.error(`‚ùå ƒê√£ th·ª≠ k·∫øt n·ªëi ${maxRetries} l·∫ßn, d·ª´ng th·ª≠ k·∫øt n·ªëi l·∫°i`);
      return null;
    }
    
    console.log(`üîÑ Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y... (L·∫ßn th·ª≠ ${retryCount}/${maxRetries}) üîÑ`);
    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
    setTimeout(() => {
      connectToDatabase();
    }, 5000);
    
    // Kh√¥ng throw error ƒë·ªÉ tr√°nh crash ·ª©ng d·ª•ng
    return null;
  }
};

// H√†m ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi, c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü c√°c module kh√°c
const isConnected = () => {
  return connected;
};

// H√†m l·∫•y s·ªë l·∫ßn ƒë√£ th·ª≠ k·∫øt n·ªëi
const getRetryCount = () => {
  return retryCount;
};

// X·ª≠ l√Ω l·ªói pool
pool.on('connection', (connection) => {
  console.log('üì¶ MySQL pool connection established as id ' + connection.threadId);
});

pool.on('error', (err) => {
  console.error('‚ùå MySQL pool error:', err);
  if (err.code === 'PROTOCOL_CONNECTION_LOST') {
    console.log('üîÑ K·∫øt n·ªëi MySQL b·ªã m·∫•t, th·ª≠ k·∫øt n·ªëi l·∫°i...');
    connected = false;
    connectToDatabase();
  } else {
    console.error('‚ùå L·ªói MySQL nghi√™m tr·ªçng:', err);
  }
});

// Kh·ªüi t·∫°o k·∫øt n·ªëi
connectToDatabase();

module.exports = {
  pool,
  isConnected,
  connectToDatabase,
  getRetryCount
};
